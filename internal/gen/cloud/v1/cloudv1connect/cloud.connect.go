// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: cloud/v1/cloud.proto

package cloudv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	http "net/http"
	v1 "redis/internal/gen/cloud/v1"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// RedisServiceName is the fully-qualified name of the RedisService service.
	RedisServiceName = "cloud.v1.RedisService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RedisServiceSetProcedure is the fully-qualified name of the RedisService's Set RPC.
	RedisServiceSetProcedure = "/cloud.v1.RedisService/Set"
	// RedisServiceGetProcedure is the fully-qualified name of the RedisService's Get RPC.
	RedisServiceGetProcedure = "/cloud.v1.RedisService/Get"
	// RedisServiceDelProcedure is the fully-qualified name of the RedisService's Del RPC.
	RedisServiceDelProcedure = "/cloud.v1.RedisService/Del"
	// RedisServiceIncrProcedure is the fully-qualified name of the RedisService's Incr RPC.
	RedisServiceIncrProcedure = "/cloud.v1.RedisService/Incr"
	// RedisServiceExpireProcedure is the fully-qualified name of the RedisService's Expire RPC.
	RedisServiceExpireProcedure = "/cloud.v1.RedisService/Expire"
	// RedisServicePingProcedure is the fully-qualified name of the RedisService's Ping RPC.
	RedisServicePingProcedure = "/cloud.v1.RedisService/Ping"
	// RedisServiceBackupProcedure is the fully-qualified name of the RedisService's Backup RPC.
	RedisServiceBackupProcedure = "/cloud.v1.RedisService/Backup"
	// RedisServiceRestoreProcedure is the fully-qualified name of the RedisService's Restore RPC.
	RedisServiceRestoreProcedure = "/cloud.v1.RedisService/Restore"
	// RedisServiceJoinProcedure is the fully-qualified name of the RedisService's Join RPC.
	RedisServiceJoinProcedure = "/cloud.v1.RedisService/Join"
)

// RedisServiceClient is a client for the cloud.v1.RedisService service.
type RedisServiceClient interface {
	// Set stores a key-value pair
	Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error)
	// Get retrieves the value for a given key
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	// Del deletes one or more keys
	Del(context.Context, *connect.Request[v1.DelRequest]) (*connect.Response[v1.DelResponse], error)
	// Incr increments the integer value of a key
	Incr(context.Context, *connect.Request[v1.IncrRequest]) (*connect.Response[v1.IncrResponse], error)
	// Expire sets a timeout on a key
	Expire(context.Context, *connect.Request[v1.ExpireRequest]) (*connect.Response[v1.ExpireResponse], error)
	// Ping checks if the server is responsive
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// Backup creates a backup of the current dataset
	Backup(context.Context, *connect.Request[v1.BackupRequest]) (*connect.Response[v1.BackupResponse], error)
	// Restore rebuilds the dataset from a backup file
	Restore(context.Context, *connect.Request[v1.RestoreRequest]) (*connect.Response[v1.RestoreResponse], error)
	// Join adds a new node to the cluster
	Join(context.Context, *connect.Request[v1.JoinRequest]) (*connect.Response[v1.JoinResponse], error)
}

// NewRedisServiceClient constructs a client for the cloud.v1.RedisService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRedisServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RedisServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &redisServiceClient{
		set: connect.NewClient[v1.SetRequest, v1.SetResponse](
			httpClient,
			baseURL+RedisServiceSetProcedure,
			opts...,
		),
		get: connect.NewClient[v1.GetRequest, v1.GetResponse](
			httpClient,
			baseURL+RedisServiceGetProcedure,
			opts...,
		),
		del: connect.NewClient[v1.DelRequest, v1.DelResponse](
			httpClient,
			baseURL+RedisServiceDelProcedure,
			opts...,
		),
		incr: connect.NewClient[v1.IncrRequest, v1.IncrResponse](
			httpClient,
			baseURL+RedisServiceIncrProcedure,
			opts...,
		),
		expire: connect.NewClient[v1.ExpireRequest, v1.ExpireResponse](
			httpClient,
			baseURL+RedisServiceExpireProcedure,
			opts...,
		),
		ping: connect.NewClient[v1.PingRequest, v1.PingResponse](
			httpClient,
			baseURL+RedisServicePingProcedure,
			opts...,
		),
		backup: connect.NewClient[v1.BackupRequest, v1.BackupResponse](
			httpClient,
			baseURL+RedisServiceBackupProcedure,
			opts...,
		),
		restore: connect.NewClient[v1.RestoreRequest, v1.RestoreResponse](
			httpClient,
			baseURL+RedisServiceRestoreProcedure,
			opts...,
		),
		join: connect.NewClient[v1.JoinRequest, v1.JoinResponse](
			httpClient,
			baseURL+RedisServiceJoinProcedure,
			opts...,
		),
	}
}

// redisServiceClient implements RedisServiceClient.
type redisServiceClient struct {
	set     *connect.Client[v1.SetRequest, v1.SetResponse]
	get     *connect.Client[v1.GetRequest, v1.GetResponse]
	del     *connect.Client[v1.DelRequest, v1.DelResponse]
	incr    *connect.Client[v1.IncrRequest, v1.IncrResponse]
	expire  *connect.Client[v1.ExpireRequest, v1.ExpireResponse]
	ping    *connect.Client[v1.PingRequest, v1.PingResponse]
	backup  *connect.Client[v1.BackupRequest, v1.BackupResponse]
	restore *connect.Client[v1.RestoreRequest, v1.RestoreResponse]
	join    *connect.Client[v1.JoinRequest, v1.JoinResponse]
}

// Set calls cloud.v1.RedisService.Set.
func (c *redisServiceClient) Set(ctx context.Context, req *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error) {
	return c.set.CallUnary(ctx, req)
}

// Get calls cloud.v1.RedisService.Get.
func (c *redisServiceClient) Get(ctx context.Context, req *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return c.get.CallUnary(ctx, req)
}

// Del calls cloud.v1.RedisService.Del.
func (c *redisServiceClient) Del(ctx context.Context, req *connect.Request[v1.DelRequest]) (*connect.Response[v1.DelResponse], error) {
	return c.del.CallUnary(ctx, req)
}

// Incr calls cloud.v1.RedisService.Incr.
func (c *redisServiceClient) Incr(ctx context.Context, req *connect.Request[v1.IncrRequest]) (*connect.Response[v1.IncrResponse], error) {
	return c.incr.CallUnary(ctx, req)
}

// Expire calls cloud.v1.RedisService.Expire.
func (c *redisServiceClient) Expire(ctx context.Context, req *connect.Request[v1.ExpireRequest]) (*connect.Response[v1.ExpireResponse], error) {
	return c.expire.CallUnary(ctx, req)
}

// Ping calls cloud.v1.RedisService.Ping.
func (c *redisServiceClient) Ping(ctx context.Context, req *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return c.ping.CallUnary(ctx, req)
}

// Backup calls cloud.v1.RedisService.Backup.
func (c *redisServiceClient) Backup(ctx context.Context, req *connect.Request[v1.BackupRequest]) (*connect.Response[v1.BackupResponse], error) {
	return c.backup.CallUnary(ctx, req)
}

// Restore calls cloud.v1.RedisService.Restore.
func (c *redisServiceClient) Restore(ctx context.Context, req *connect.Request[v1.RestoreRequest]) (*connect.Response[v1.RestoreResponse], error) {
	return c.restore.CallUnary(ctx, req)
}

// Join calls cloud.v1.RedisService.Join.
func (c *redisServiceClient) Join(ctx context.Context, req *connect.Request[v1.JoinRequest]) (*connect.Response[v1.JoinResponse], error) {
	return c.join.CallUnary(ctx, req)
}

// RedisServiceHandler is an implementation of the cloud.v1.RedisService service.
type RedisServiceHandler interface {
	// Set stores a key-value pair
	Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error)
	// Get retrieves the value for a given key
	Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error)
	// Del deletes one or more keys
	Del(context.Context, *connect.Request[v1.DelRequest]) (*connect.Response[v1.DelResponse], error)
	// Incr increments the integer value of a key
	Incr(context.Context, *connect.Request[v1.IncrRequest]) (*connect.Response[v1.IncrResponse], error)
	// Expire sets a timeout on a key
	Expire(context.Context, *connect.Request[v1.ExpireRequest]) (*connect.Response[v1.ExpireResponse], error)
	// Ping checks if the server is responsive
	Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error)
	// Backup creates a backup of the current dataset
	Backup(context.Context, *connect.Request[v1.BackupRequest]) (*connect.Response[v1.BackupResponse], error)
	// Restore rebuilds the dataset from a backup file
	Restore(context.Context, *connect.Request[v1.RestoreRequest]) (*connect.Response[v1.RestoreResponse], error)
	// Join adds a new node to the cluster
	Join(context.Context, *connect.Request[v1.JoinRequest]) (*connect.Response[v1.JoinResponse], error)
}

// NewRedisServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRedisServiceHandler(svc RedisServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	redisServiceSetHandler := connect.NewUnaryHandler(
		RedisServiceSetProcedure,
		svc.Set,
		opts...,
	)
	redisServiceGetHandler := connect.NewUnaryHandler(
		RedisServiceGetProcedure,
		svc.Get,
		opts...,
	)
	redisServiceDelHandler := connect.NewUnaryHandler(
		RedisServiceDelProcedure,
		svc.Del,
		opts...,
	)
	redisServiceIncrHandler := connect.NewUnaryHandler(
		RedisServiceIncrProcedure,
		svc.Incr,
		opts...,
	)
	redisServiceExpireHandler := connect.NewUnaryHandler(
		RedisServiceExpireProcedure,
		svc.Expire,
		opts...,
	)
	redisServicePingHandler := connect.NewUnaryHandler(
		RedisServicePingProcedure,
		svc.Ping,
		opts...,
	)
	redisServiceBackupHandler := connect.NewUnaryHandler(
		RedisServiceBackupProcedure,
		svc.Backup,
		opts...,
	)
	redisServiceRestoreHandler := connect.NewUnaryHandler(
		RedisServiceRestoreProcedure,
		svc.Restore,
		opts...,
	)
	redisServiceJoinHandler := connect.NewUnaryHandler(
		RedisServiceJoinProcedure,
		svc.Join,
		opts...,
	)
	return "/cloud.v1.RedisService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RedisServiceSetProcedure:
			redisServiceSetHandler.ServeHTTP(w, r)
		case RedisServiceGetProcedure:
			redisServiceGetHandler.ServeHTTP(w, r)
		case RedisServiceDelProcedure:
			redisServiceDelHandler.ServeHTTP(w, r)
		case RedisServiceIncrProcedure:
			redisServiceIncrHandler.ServeHTTP(w, r)
		case RedisServiceExpireProcedure:
			redisServiceExpireHandler.ServeHTTP(w, r)
		case RedisServicePingProcedure:
			redisServicePingHandler.ServeHTTP(w, r)
		case RedisServiceBackupProcedure:
			redisServiceBackupHandler.ServeHTTP(w, r)
		case RedisServiceRestoreProcedure:
			redisServiceRestoreHandler.ServeHTTP(w, r)
		case RedisServiceJoinProcedure:
			redisServiceJoinHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRedisServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRedisServiceHandler struct{}

func (UnimplementedRedisServiceHandler) Set(context.Context, *connect.Request[v1.SetRequest]) (*connect.Response[v1.SetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloud.v1.RedisService.Set is not implemented"))
}

func (UnimplementedRedisServiceHandler) Get(context.Context, *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloud.v1.RedisService.Get is not implemented"))
}

func (UnimplementedRedisServiceHandler) Del(context.Context, *connect.Request[v1.DelRequest]) (*connect.Response[v1.DelResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloud.v1.RedisService.Del is not implemented"))
}

func (UnimplementedRedisServiceHandler) Incr(context.Context, *connect.Request[v1.IncrRequest]) (*connect.Response[v1.IncrResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloud.v1.RedisService.Incr is not implemented"))
}

func (UnimplementedRedisServiceHandler) Expire(context.Context, *connect.Request[v1.ExpireRequest]) (*connect.Response[v1.ExpireResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloud.v1.RedisService.Expire is not implemented"))
}

func (UnimplementedRedisServiceHandler) Ping(context.Context, *connect.Request[v1.PingRequest]) (*connect.Response[v1.PingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloud.v1.RedisService.Ping is not implemented"))
}

func (UnimplementedRedisServiceHandler) Backup(context.Context, *connect.Request[v1.BackupRequest]) (*connect.Response[v1.BackupResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloud.v1.RedisService.Backup is not implemented"))
}

func (UnimplementedRedisServiceHandler) Restore(context.Context, *connect.Request[v1.RestoreRequest]) (*connect.Response[v1.RestoreResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloud.v1.RedisService.Restore is not implemented"))
}

func (UnimplementedRedisServiceHandler) Join(context.Context, *connect.Request[v1.JoinRequest]) (*connect.Response[v1.JoinResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("cloud.v1.RedisService.Join is not implemented"))
}
